// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String            @id
  username              String            @db.Text
  email                 String
  emailVerified         Boolean           @default(false)
  avatar                String?           @db.Text
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @default(now()) @updatedAt
  sessions              Session[]
  accounts              Account[]
  workspaces            Workspace[]
  sentNotifications     Notification[]    @relation("SentNotifications")
  receivedNotifications Notification[]    @relation("ReceivedNotifications")
  WorkspaceInvite       WorkspaceInvite[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?  @db.Text
  userAgent String?  @db.Text
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String    @db.Text
  providerId            String    @db.Text
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  idToken               String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?   @db.Text
  password              String?   @db.Text
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String   @db.Text
  value      String   @db.Text
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Workspace {
  id          String   @id @default(uuid())
  name        String   @db.Text
  description String?  @db.Text
  logo        String?  @db.Text
  owner_id    String
  owner       User     @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  WorkspaceInvite WorkspaceInvite[]
}

model WorkspaceInvite {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  status      String    @default("pending")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  @@map("workspace_invite")
}

model Notification {
  id         String   @id @default(uuid())
  senderId   String
  sender     User     @relation("SentNotifications", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId String
  receiver   User     @relation("ReceivedNotifications", fields: [receiverId], references: [id], onDelete: Cascade)
  title      String
  message    String
  status     String   @default("unread")
  directLink String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("notification")
}
